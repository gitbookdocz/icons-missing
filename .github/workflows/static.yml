name: Build and Deploy GitBook

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Install Node 10 (required for GitBook CLI v3)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '10'

      # 3. Install GitBook CLI
      - name: Install GitBook CLI
        run: |
          npm install -g gitbook-cli
          gitbook fetch 3.2.3

      # 4. Clean unsupported GitBook tags in Markdown
      - name: Clean unsupported GitBook tags
        run: |
          find . -name "*.md" -type f -print0 | xargs -0 sed -i -E 's/\{\% hint.*\%\}/> **Note:** /g'
          find . -name "*.md" -type f -print0 | xargs -0 sed -i -E 's/\{\% endhint.*\%\}//g'

      # 5. Generate SUMMARY.md with icons and embed placeholders
      - name: Generate SUMMARY.md
        run: |
          python3 <<'EOF'
import os, re, json

md_files = sorted([f for f in os.listdir('.') if f.endswith('.md')])
summary = ['# Summary', '']
icon_map = {}

fixes = {
    'book': 'book-open',
    'download-alt': 'download',
    'info-circle': 'circle-info',
    'warning-sign': 'triangle-exclamation',
    'note': 'sticky-note',
    'checkmark': 'check',
    'cross': 'xmark'
}

def to_embed(url):
    if not url:
        return None
    if 'youtu.be/' in url:
        vid = url.rsplit('/',1)[1].split('?')[0]
        return f'https://www.youtube.com/embed/{vid}'
    m = re.search(r'v=([^&]+)', url)
    if 'youtube.com/watch' in url and m:
        return f'https://www.youtube.com/embed/{m.group(1)}'
    if 'vimeo.com/' in url and 'player.vimeo.com' not in url:
        vid = url.rsplit('/',1)[1].split('?')[0]
        return f'https://player.vimeo.com/video/{vid}'
    return url

for f in md_files:
    if f in ('README.md','SUMMARY.md'):
        continue
    try:
        with open(f,'r',encoding='utf-8') as fh:
            content = fh.read()
    except UnicodeDecodeError:
        continue

    title_m = re.search(r'^\s*#\s*(.+)', content, re.MULTILINE)
    title = title_m.group(1).strip() if title_m else os.path.splitext(f)[0]

    icon_match = re.search(r'^[ \t]*icon:[ \t]*["\']?(.+?)["\']?\s*$', content, re.MULTILINE)
    icon = icon_match.group(1).strip() if icon_match else None
    if icon:
        icon = icon.lower().replace(' ','-')
        if icon in fixes:
            icon = fixes[icon]

    video_match = re.search(r'^[ \t]*video:[ \t]*["\']?(.+?)["\']?\s*$', content, re.MULTILINE)
    iframe_match = re.search(r'^[ \t]*iframe:[ \t]*["\']?(.+?)["\']?\s*$', content, re.MULTILINE)
    embed_url = None
    if video_match or iframe_match:
        embed_url = to_embed(video_match.group(1) if video_match else iframe_match.group(1))
        if embed_url and '<iframe' not in content:
            if title_m:
                h = title_m.group(0)
                new_content = content.replace(h, h + f'\n\n<div class="embed-placeholder" data-embed-src="{embed_url}"></div>\n', 1)
                try:
                    with open(f,'w',encoding='utf-8') as fh:
                        fh.write(new_content)
                    content = new_content
                except Exception:
                    pass

    if icon:
        summary.append(f'* [<i class="fa-solid fa-{icon}"></i> {title}]({f})')
        icon_map[f] = {'icon': icon}
        if embed_url:
            icon_map[f]['video'] = embed_url
    else:
        summary.append(f'* [{title}]({f})')
        if embed_url:
            icon_map[f] = {'video': embed_url}

with open('SUMMARY.md','w',encoding='utf-8') as fh:
    fh.write('\n'.join(summary))

os.makedirs('assets', exist_ok=True)
with open(os.path.join('assets','icon-map.json'),'w',encoding='utf-8') as fh:
    json.dump(icon_map, fh, indent=2)
EOF

      # 6. Create book.json
      - name: Create book.json
        run: |
          cat > book.json <<EOF
{
  "plugins": ["-highlight", "fontsettings", "theme-default"],
  "styles": {
    "website": "styles/website.css"
  }
}
EOF

      # 7. Add global CSS
      - name: Add global CSS
        run: |
          mkdir -p styles
          cat > styles/website.css <<EOF
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');
.markdown-section h1:before,.markdown-section h2:before,.markdown-section h3:before {
  font-family:"Font Awesome 6 Free"; font-weight:900; margin-right:8px;}
#book-summary .summary a i,.book-summary .summary a i,.summary a i,.nav a i {
  font-family:"Font Awesome 6 Free"; font-weight:900; margin-right:8px; display:inline-block; vertical-align:middle;}
.embed-placeholder {
  width:100%; min-height:180px; display:flex; align-items:center; justify-content:center;
  background:#111; color:#fff; border-radius:6px; margin:8px 0;
}
.embed-placeholder::after { content:"Video will load..."; opacity:0.75; }
EOF

      # 8. Install GitBook plugins
      - name: Install GitBook plugins
        run: gitbook install

      # 9. Build GitBook and replace embed placeholders
      - name: Build GitBook
        run: |
          gitbook build
          find _book -name "*.html" -type f -exec sed -i -E \
            's#<div class="embed-placeholder" data-embed-src="([^"]+)"></div>#<iframe src="\1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="width:100%;height:360px;"></iframe>#g' {} \;
          find _book -name "*.html" -type f -exec sed -i \
            's#</head>#<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer"/></head>#' {} \;

      # 10. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_book
